use jsonwebtoken::{decode, DecodingKey, Validation};

use serde::{Serialize, Deserialize};

#[derive(Debug, Serialize, Deserialize)]
struct VMInfo {
    id: String,
    name: String,
    ip: String,
}

#[derive(Debug, Serialize, Deserialize)]
struct TokenClaims {
    purpose: String,  // Communication purpose
    src_vm: VMInfo,   // Source VM details
    dst_vm: VMInfo,   // Destination VM details
    iat: usize,       // Issued at (UNIX timestamp)
    exp: usize,       // Expiration time
}

use jsonwebtoken::{encode, Header, Algorithm, EncodingKey};
use std::time::{SystemTime, UNIX_EPOCH};

fn generate_token(secret: &str, purpose: &str, src: VMInfo, dst: VMInfo) -> String {
    let now = SystemTime::now()
        .duration_since(UNIX_EPOCH)
        .unwrap()
        .as_secs() as usize;

    let claims = TokenClaims {
        purpose: purpose.to_string(),
        src_vm: src,
        dst_vm: dst,
        iat: now,
        exp: now + 300,  // Token expires in 5 minutes
    };  

    encode(
        &Header::new(Algorithm::HS256),
        &claims,
        &EncodingKey::from_secret(secret.as_ref()),
    ).unwrap()
}


fn validate_token(token: &str, secret: &str) -> Result<TokenClaims, jsonwebtoken::errors::Error> {
    let decoded = decode::<TokenClaims>(
        token,
        &DecodingKey::from_secret(secret.as_ref()),
        &Validation::new(Algorithm::HS256),
    )?;

    Ok(decoded.claims)
}

fn main() {
    let secret = "secure_secret_key";
    
    // Example token generation
    let src_vm = VMInfo { id: "vm-1".into(), name: "source-vm".into(), ip: "192.168.1.10".into() };
    let dst_vm = VMInfo { id: "vm-2".into(), name: "destination-vm".into(), ip: "192.168.1.20".into() };
    let token = generate_token(secret, "data-transfer", src_vm, dst_vm);
    println!("Token: {:?}", token);
    // Validate the token
    match validate_token(&token, secret) {
        Ok(claims) => println!("Valid Token! Claims: {:?}", claims),
        Err(err) => println!("Invalid Token: {:?}", err),
    }
}
